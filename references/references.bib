@article{Lynch1968,
	abstract = {A field-proven scheme for achieving reliable duplex transmission over a half-duplex communication line is presented, and to demonstrate the difficulty of the problem, another similar scheme, which is only slightly unreliable, is also presented. A flowchart for the reliable scheme and some interesting examples are given.},
	author = {Lynch, W. C.},
	doi = {10.1145/363347.363366},
	file = {Full Text PDF:Lynch1968 - Computer Systems_ Reliable Full Duplex File Transmission Over Half Duplex Telephone Line.pdf:application/pdf},
	issn = {0001-0782},
	journal = {Commun. ACM},
	month = jun,
	number = {6},
	pages = {407--410},
	shorttitle = {Computer {Systems}},
	title = {Computer {Systems}: Reliable full-duplex file transmission over half-duplex telephone line},
	urldate = {2025-03-31},
	volume = {11},
	year = {1968},
	bdsk-url-1 = {https://doi.org/10.1145/363347.363366}}

@article{Bartlett1969,
	abstract = {A simple procedure for achieving reliable full-duplex transmission over half-duplex links is proposed. The scheme is compared with another of the same type, which has recently been described in the literature. Finally, some comments are made on another group of related transmission procedures which have been shown to be unreliable under some circumstances.},
	author = {Bartlett, K. A. and Scantlebury, R. A. and Wilkinson, P. T.},
	doi = {10.1145/362946.362970},
	file = {Full Text PDF:Bartlett1969 - A Note on Reliable Full Duplex Transmission Over Half Duplex Links.pdf:application/pdf},
	issn = {0001-0782},
	journal = {Commun. ACM},
	month = may,
	number = {5},
	pages = {260--261},
	title = {A note on reliable full-duplex transmission over half-duplex links},
	urldate = {2025-03-31},
	volume = {12},
	year = {1969},
	bdsk-url-1 = {https://doi.org/10.1145/362946.362970}}

@article{Lamport1978,
	abstract = {The concept of one event happening before another in a distributed system is examined, and is shown to define a partial ordering of the events. A distributed algorithm is given for synchronizing a system of logical clocks which can be used to totally order the events. The use of the total ordering is illustrated with a method for solving synchronization problems. The algorithm is then specialized for synchronizing physical clocks, and a bound is derived on how far out of synchrony the clocks can become.},
	author = {Lamport, Leslie},
	date-added = {2023-03-02 16:12:11 -0800},
	date-modified = {2023-03-02 16:12:11 -0800},
	doi = {10.1145/359545.359563},
	file = {Lamport - 1978 - Time, clocks, and the ordering of events in a dist.pdf:files/1777/Lamport - 1978 - Time, clocks, and the ordering of events in a dist.pdf:application/pdf},
	issn = {0001-0782, 1557-7317},
	journal = {Commun. ACM},
	language = {en},
	month = jul,
	number = {7},
	pages = {558--565},
	title = {Time, clocks, and the ordering of events in a distributed system},
	url = {https://dl.acm.org/doi/10.1145/359545.359563},
	urldate = {2023-03-01},
	volume = {21},
	year = {1978},
	bdsk-url-1 = {https://dl.acm.org/doi/10.1145/359545.359563},
	bdsk-url-2 = {https://doi.org/10.1145/359545.359563}}

@inproceedings{Brewer2000,
	abstract = {Current distributed systems, even the ones that work, tend to be very fragile: they are hard to keep up, hard to manage, hard to grow, hard to evolve, and hard to program. In this talk, I look at several issues in an attempt to clean up the way we think about these systems. These issues include the fault model, high availability, graceful degradation, data consistency, evolution, composition, and autonomy. These are not (yet) provable principles, but merely ways to think about the issues that simplify design in practice. They draw on experience at Berkeley and with giant-scale systems built at Inktomi, including the system that handles 50\% of all web searches.},
	address = {New York, NY, USA},
	author = {Brewer, Eric A.},
	booktitle = {Proceedings of the nineteenth annual {ACM} symposium on {Principles} of distributed computing},
	date-added = {2023-02-23 09:32:29 -0800},
	date-modified = {2023-02-23 09:32:29 -0800},
	doi = {10.1145/343477.343502},
	file = {Full Text PDF:files/1528/Brewer - 2000 - Towards robust distributed systems (abstract).pdf:application/pdf},
	isbn = {978-1-58113-183-3},
	month = jul,
	pages = {7},
	publisher = {Association for Computing Machinery},
	series = {{PODC} '00},
	title = {Towards robust distributed systems (abstract)},
	url = {https://doi.org/10.1145/343477.343502},
	urldate = {2023-02-16},
	year = {2000},
	bdsk-url-1 = {https://doi.org/10.1145/343477.343502}}

@misc{Borrill2022,
	author = {Borrill, Paul},
	date-added = {2022-12-21 13:07:03 -0800},
	date-modified = {2022-12-22 16:25:17 -0800},
	journal = {Wolfram Community},
	title = {Quantum Ethernet},
	url = {community.wolfram.com},
	year = {2022},
	bdsk-url-1 = {community.wolfram.com}}

@inproceedings{li2024vizing,
	author = {Bernstein, Aaron and Bhattacharya, Sayan and Kiss, Peter and Saranurak, Thatchaphol},
	booktitle = {Proceedings of the 57th Annual ACM Symposium on Theory of Computing},
	pages = {132--143},
	title = {Deterministic Dynamic Maximal Matching in Sublinear Update Time},
	year = {2025}}

@inproceedings{BSW,
	author = {Davies, Donald W and Bartlett, Keith A and Scantlebury, Roger A and Wilkinson, Peter T},
	booktitle = {Proceedings of the first ACM symposium on Operating System Principles},
	pages = {2--1},
	title = {A digital communication network for computers giving rapid response at remote terminals},
	year = {1967}}

@misc{CAP,
	abstract = {In distributed applications, Brewer's CAP theorem tells us that when networks become partitioned, there is a tradeoff between consistency and availability. Consistency is agreement on the values of shared variables across a system, and availability is the ability to respond to reads and writes accessing those shared variables. We quantify these concepts, giving numerical values to inconsistency and unavailability. Recognizing that network partitioning is not an all-or-nothing proposition, we replace the P in CAP with L, a numerical measure of apparent latency, and derive the CAL theorem, an algebraic relation between inconsistency, unavailability, and apparent latency. This relation shows that if latency becomes unbounded (e.g., the network becomes partitioned), then one of inconsistency and unavailability must also become unbounded, and hence the CAP theorem is a special case of the CAL theorem. We describe two distributed coordination mechanisms, which we have implemented as an extension of the Lingua Franca coordination language, that support arbitrary tradeoffs between consistency and availability as apparent latency varies. With centralized coordination, inconsistency remains bounded by a chosen numerical value at the cost that unavailability becomes unbounded under network partitioning. With decentralized coordination, unavailability remains bounded by a chosen numerical quantity at the cost that inconsistency becomes unbounded under network partitioning. Our centralized coordination mechanism is an extension of techniques that have historically been used for distributed simulation, an application where consistency is paramount. Our decentralized coordination mechanism is an extension of techniques that have been used in distributed databases when availability is paramount.},
	author = {Lee, Edward A. and Bateni, Soroush and Lin, Shaokai and Lohstroh, Marten and Menard, Christian},
	date-added = {2023-05-28 14:49:02 -0700},
	date-modified = {2025-07-08 17:31:44 -0700},
	doi = {10.48550/arXiv.2109.07771},
	file = {arXiv Fulltext PDF:files/211/Lee et al. - 2021 - Quantifying and Generalizing the CAP Theorem.pdf:application/pdf;arXiv.org Snapshot:files/212/2109.html:text/html},
	keywords = {Computer Science - Distributed, Parallel, and Cluster Computing},
	month = sep,
	note = {arXiv:2109.07771 [cs]},
	publisher = {arXiv},
	title = {Quantifying and Generalizing the CAP Theorem},
	url = {http://arxiv.org/abs/2109.07771},
	urldate = {2023-01-29},
	year = {2021},
	bdsk-url-1 = {http://arxiv.org/abs/2109.07771},
	bdsk-url-2 = {https://doi.org/10.48550/arXiv.2109.07771}}

@article{AmazonDynamo2007,
	author = {DeCandia, Giuseppe and Hastorun, Deniz and Jampani, Madan and Kakulapati, Gunavardhan and Lakshman, Avinash and Pilchin, Alex and Sivasubramanian, Swaminathan and Vosshall, Peter and Vogels, Werner},
	date-modified = {2025-07-08 17:55:57 -0700},
	journal = {ACM SIGOPS operating systems review},
	number = {6},
	pages = {205--220},
	publisher = {ACM New York, NY, USA},
	title = {Dynamo: Amazon's highly available key-value store},
	volume = {41},
	year = {2007}}

@misc{Gray2004,
	abstract = {The distributed transaction commit problem requires reaching agreement on whether a transaction is committed or aborted. The classic Two-Phase Commit protocol blocks if the coordinator fails. Fault-tolerant consensus algorithms also reach agreement, but do not block whenever any majority of the processes are working. Running a Paxos consensus algorithm on the commit/abort decision of each participant yields a transaction commit protocol that uses 2F +1 coordinators and makes progress if at least F +1 of them are working. In the fault-free case, this algorithm requires one extra message delay but has the same stable-storage write delay as Two-Phase Commit. The classic Two-Phase Commit algorithm is obtained as the special F = 0 case of the general Paxos Commit algorithm.},
	author = {Gray, Jim and Lamport, Leslie},
	doi = {10.48550/arXiv.cs/0408036},
	file = {Preprint PDF:/Users/susan.a.angelo/Zotero/storage/CPVG8GFE/Gray and Lamport - 2004 - Consensus on Transaction Commit.pdf:application/pdf;Snapshot:/Users/susan.a.angelo/Zotero/storage/3G3XPASK/0408036.html:text/html},
	month = aug,
	note = {arXiv:cs/0408036},
	publisher = {arXiv},
	title = {Consensus on Transaction Commit},
	url = {http://arxiv.org/abs/cs/0408036},
	urldate = {2025-04-12},
	year = {2004},
	bdsk-url-1 = {http://arxiv.org/abs/cs/0408036},
	bdsk-url-2 = {https://doi.org/10.48550/arXiv.cs/0408036}}

@inproceedings{GoogleSpanner2012,
	author = {Corbett, James C. and Dean, Jeffrey and Epstein, Michael and Fikes, Andrew and Frost, Christopher and Furman, J. J. and Ghemawat, Sanjay and Gubarev, Andrey and Heiser, Christopher and Hochschild, Peter and Hsieh, Wilson and Kanthak, Sebastian and Kogan, Eugene and Li, Hongyi and Lloyd, Alexander and Melnik, Sergey and Mwaura, David and Nagle, David and Quinlan, Sean and Rao, Rajesh and Rolig, Lindsay and Woodford, Dale and Saito, Yasushi and Taylor, Christopher and Szymaniak, Michal and Wang, Ruth},
	booktitle = {{OSDI}},
	date-added = {2023-01-18 11:19:49 -0800},
	date-modified = {2025-07-08 17:29:33 -0700},
	file = {Full Text PDF:files/724/Corbett et al. - 2012 - Spanner Google's Globally-Distributed Database.pdf:application/pdf},
	shorttitle = {Spanner},
	title = {Spanner: {Google}'s {Globally}-{Distributed} Database},
	year = {2012}}

@misc{threevaluedlogic2025,
	abstract = {In logic, a three-valued logic (also trinary logic, trivalent, ternary, or trilean, sometimes abbreviated 3VL) is any of several many-valued logic systems in which there are three truth values indicating true, false, and some third value. This is contrasted with the more commonly known bivalent logics (such as classical sentential or Boolean logic) which provide only for true and false.
Emil Leon Post is credited with first introducing additional logical truth degrees in his 1921 theory of elementary propositions. The conceptual form and basic ideas of three-valued logic were initially published by Jan {\L}ukasiewicz and Clarence Irving Lewis. These were then re-formulated by Grigore Constantin Moisil in an axiomatic algebraic form, and also extended to n-valued logics in 1945.},
	copyright = {Creative Commons Attribution-ShareAlike License},
	file = {Snapshot:/Users/sahas/Zotero/storage/WX93BN9M/Three-valued_logic.html:text/html},
	howpublished = {Wikipedia},
	journal = {Wikipedia},
	language = {en},
	month = mar,
	note = {Page Version ID: 1281826018},
	title = {Three-valued logic},
	url = {https://en.wikipedia.org/w/index.php?title=Three-valued_logic&oldid=1281826018},
	urldate = {2025-05-03},
	year = {2025},
	bdsk-url-1 = {https://en.wikipedia.org/w/index.php?title=Three-valued_logic&oldid=1281826018}}

@Article{Mathis1997,
  author   = {Mathis, Matthew and Semke, Jeffrey and Mahdavi, Jamshid and Ott, Teunis},
  journal  = {ACM SIGCOMM Computer Communication Review},
  title    = {The macroscopic behavior of the TCP congestion avoidance algorithm},
  year     = {1997},
  issn     = {0146-4833},
  month    = jul,
  number   = {3},
  pages    = {67--82},
  volume   = {27},
  abstract = {In this paper, we analyze a performance model for the TCP Congestion Avoidance algorithm. The model predicts the bandwidth of a sustained TCP connection subjected to light to moderate packet losses, such as loss caused by network congestion. It assumes that TCP avoids retransmission timeouts and always has sufficient receiver window and sender data. The model predicts the Congestion Avoidance performance of nearly all TCP implementations under restricted conditions and of TCP with Selective Acknowledgements over a much wider range of Internet conditions.We verify the model through both simulation and live Internet measurements. The simulations test several TCP implementations under a range of loss conditions and in environments with both drop-tail and RED queuing. The model is also compared to live Internet measurements using the TReno diagnostic and real TCP implementations.We also present several applications of the model to problems of bandwidth allocation in the Internet. We use the model to analyze networks with multiple congested gateways; this analysis shows strong agreement with prior work in this area. Finally, we present several important implications about the behavior of the Internet in the presence of high load from diverse user communities.},
  doi      = {10.1145/263932.264023},
  file     = {Submitted Version:/Users/sahas/Zotero/storage/VZ5F3733/Mathis et al. - 1997 - The macroscopic behavior of the TCP congestion avoidance algorithm.pdf:application/pdf},
  language = {en},
  url      = {https://dl.acm.org/doi/10.1145/263932.264023},
  urldate  = {2025-06-08},
}

@Article{Gettys2012,
  author     = {Gettys, Jim and Nichols, Kathleen},
  journal    = {Commun. ACM},
  title      = {Bufferbloat: dark buffers in the internet},
  year       = {2012},
  issn       = {0001-0782},
  month      = jan,
  number     = {1},
  pages      = {57--65},
  volume     = {55},
  abstract   = {Networks without effective AQM may again be vulnerable to congestion collapse.},
  doi        = {10.1145/2063176.2063196},
  file       = {Full Text PDF:/Users/sahas/Zotero/storage/UN3CSCRG/Gettys and Nichols - 2012 - Bufferbloat dark buffers in the internet.pdf:application/pdf},
  shorttitle = {Bufferbloat},
  url        = {https://dl.acm.org/doi/10.1145/2063176.2063196},
  urldate    = {2025-06-08},
}

@InProceedings{Abramson1970,
  author     = {Abramson, Norman},
  booktitle  = {Proceedings of the {November} 17-19, 1970, fall joint computer conference on - {AFIPS} '70 ({Fall})},
  title      = {{THE} {ALOHA} {SYSTEM}: another alternative for computer communications},
  year       = {1970},
  address    = {Houston, Texas},
  pages      = {281},
  publisher  = {ACM Press},
  doi        = {10.1145/1478462.1478502},
  language   = {en},
  shorttitle = {{THE} {ALOHA} {SYSTEM}},
  url        = {http://portal.acm.org/citation.cfm?doid=1478462.1478502},
  urldate    = {2025-06-09},
}

@Article{Kleinrock1975,
  author     = {Kleinrock, L. and Tobagi, F.},
  journal    = {IEEE Transactions on Communications},
  title      = {Packet {Switching} in {Radio} {Channels}: {Part} {I} - {Carrier} {Sense} {Multiple}-{Access} {Modes} and {Their} {Throughput}-{Delay} {Characteristics}},
  year       = {1975},
  issn       = {1558-0857},
  month      = dec,
  number     = {12},
  pages      = {1400--1416},
  volume     = {23},
  abstract   = {Radio communication is considered as a method for providing remote terminal access to computers. Digital byte streams from each terminal are partitioned into packets (blocks) and transmitted in a burst mode over a shared radio channel. When many terminals operate in this fashion, transmissions may conflict with and destroy each other. A means for controlling this is for the terminal to sense the presence of other transmissions; this leads to a new method for multiplexing in a packet radio environment: carrier sense multiple access (CSMA). Two protocols are described for CSMA and their throughput-delay characteristics are given. These results show the large advantage CSMA provides as compared to the random ALOHA access modes.},
  doi        = {10.1109/TCOM.1975.1092768},
  file       = {Snapshot:/Users/sahas/Zotero/storage/HU3KS2PR/1092768.html:text/html},
  keywords   = {Bandwidth, Computer networks, Costs, Multiaccess communication, Packet radio networks, Packet switching, Radio broadcasting, Radio communication, Telephony, Wire},
  shorttitle = {Packet {Switching} in {Radio} {Channels}},
  url        = {https://ieeexplore.ieee.org/abstract/document/1092768},
  urldate    = {2025-06-09},
}

